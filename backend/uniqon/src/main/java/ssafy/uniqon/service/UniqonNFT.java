package ssafy.uniqon.service;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class UniqonNFT extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506040518060400160405280600681526020017f556e69716f6e00000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f555100000000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000433565b508060019081620000a1919062000433565b505050620000c4620000b8620000eb60201b60201c565b620000f360201b60201c565b6040518060200160405280600081525060099081620000e4919062000433565b506200051a565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200023b57607f821691505b602082108103620002515762000250620001f3565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002bb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200027c565b620002c786836200027c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003146200030e6200030884620002df565b620002e9565b620002df565b9050919050565b6000819050919050565b6200033083620002f3565b620003486200033f826200031b565b84845462000289565b825550505050565b600090565b6200035f62000350565b6200036c81848462000325565b505050565b5b8181101562000394576200038860008262000355565b60018101905062000372565b5050565b601f821115620003e357620003ad8162000257565b620003b8846200026c565b81016020851015620003c8578190505b620003e0620003d7856200026c565b83018262000371565b50505b505050565b600082821c905092915050565b60006200040860001984600802620003e8565b1980831691505092915050565b6000620004238383620003f5565b9150826002028217905092915050565b6200043e82620001b9565b67ffffffffffffffff8111156200045a5762000459620001c4565b5b62000466825462000222565b6200047382828562000398565b600060209050601f831160018114620004ab576000841562000496578287015190505b620004a2858262000415565b86555062000512565b601f198416620004bb8662000257565b60005b82811015620004e557848901518255600182019150602085019450602081019050620004be565b8683101562000505578489015162000501601f891682620003f5565b8355505b6001600288020188555050505b505050505050565b6131fe806200052a6000396000f3fe60806040526004361061011f5760003560e01c80638da5cb5b116100a0578063c87b56dd11610064578063c87b56dd146103d1578063d547cfb71461040e578063e985e9c514610439578063eacabe1414610476578063f2fde38b146104a65761011f565b80638da5cb5b146102fe57806395d89b4114610329578063a22cb46514610354578063b88d4fde1461037d578063c002d23d146103a65761011f565b806330176e13116100e757806330176e131461021b57806342842e0e146102445780636352211e1461026d57806370a08231146102aa578063715018a6146102e75761011f565b806301ffc9a71461012457806306fdde0314610161578063081812fc1461018c578063095ea7b3146101c957806323b872dd146101f2575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190611f14565b6104cf565b6040516101589190611f5c565b60405180910390f35b34801561016d57600080fd5b50610176610530565b6040516101839190612007565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae919061205f565b6105c2565b6040516101c091906120cd565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb9190612114565b610608565b005b3480156101fe57600080fd5b5061021960048036038101906102149190612154565b61071f565b005b34801561022757600080fd5b50610242600480360381019061023d91906122dc565b61077f565b005b34801561025057600080fd5b5061026b60048036038101906102669190612154565b61079a565b005b34801561027957600080fd5b50610294600480360381019061028f919061205f565b6107ba565b6040516102a191906120cd565b60405180910390f35b3480156102b657600080fd5b506102d160048036038101906102cc9190612325565b610840565b6040516102de9190612361565b60405180910390f35b3480156102f357600080fd5b506102fc6108f7565b005b34801561030a57600080fd5b5061031361090b565b60405161032091906120cd565b60405180910390f35b34801561033557600080fd5b5061033e610935565b60405161034b9190612007565b60405180910390f35b34801561036057600080fd5b5061037b600480360381019061037691906123a8565b6109c7565b005b34801561038957600080fd5b506103a4600480360381019061039f9190612489565b6109dd565b005b3480156103b257600080fd5b506103bb610a3f565b6040516103c89190612361565b60405180910390f35b3480156103dd57600080fd5b506103f860048036038101906103f3919061205f565b610a4a565b6040516104059190612007565b60405180910390f35b34801561041a57600080fd5b50610423610b5c565b6040516104309190612007565b60405180910390f35b34801561044557600080fd5b50610460600480360381019061045b919061250c565b610bea565b60405161046d9190611f5c565b60405180910390f35b610490600480360381019061048b919061254c565b610c7e565b60405161049d9190612361565b60405180910390f35b3480156104b257600080fd5b506104cd60048036038101906104c89190612325565b610cff565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610529575061052882610d82565b5b9050919050565b60606000805461053f906125d7565b80601f016020809104026020016040519081016040528092919081815260200182805461056b906125d7565b80156105b85780601f1061058d576101008083540402835291602001916105b8565b820191906000526020600020905b81548152906001019060200180831161059b57829003601f168201915b5050505050905090565b60006105cd82610e64565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610613826107ba565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a9061267a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106a2610eaf565b73ffffffffffffffffffffffffffffffffffffffff1614806106d157506106d0816106cb610eaf565b610bea565b5b610710576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107079061270c565b60405180910390fd5b61071a8383610eb7565b505050565b61073061072a610eaf565b82610f70565b61076f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107669061279e565b60405180910390fd5b61077a838383611005565b505050565b6107876112fe565b8060099081610796919061296a565b5050565b6107b5838383604051806020016040528060008152506109dd565b505050565b6000806107c68361137c565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082e90612a88565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a790612b1a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108ff6112fe565b61090960006113b9565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610944906125d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610970906125d7565b80156109bd5780601f10610992576101008083540402835291602001916109bd565b820191906000526020600020905b8154815290600101906020018083116109a057829003601f168201915b5050505050905090565b6109d96109d2610eaf565b838361147f565b5050565b6109ee6109e8610eaf565b83610f70565b610a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a249061279e565b60405180910390fd5b610a39848484846115eb565b50505050565b6601c6bf5263400081565b6060610a5582610e64565b6000600660008481526020019081526020016000208054610a75906125d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa1906125d7565b8015610aee5780601f10610ac357610100808354040283529160200191610aee565b820191906000526020600020905b815481529060010190602001808311610ad157829003601f168201915b505050505090506000610aff611647565b90506000815103610b14578192505050610b57565b600082511115610b49578082604051602001610b31929190612b76565b60405160208183030381529060405292505050610b57565b610b52846116d9565b925050505b919050565b60098054610b69906125d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b95906125d7565b8015610be25780601f10610bb757610100808354040283529160200191610be2565b820191906000526020600020905b815481529060010190602001808311610bc557829003601f168201915b505050505081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006601c6bf526340003414610cc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc090612c0c565b60405180910390fd5b610cd36008611741565b6000610cdf6008611757565b9050610ceb8482611765565b610cf58184611982565b8091505092915050565b610d076112fe565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6d90612c9e565b60405180910390fd5b610d7f816113b9565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610e4d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610e5d5750610e5c82611a26565b5b9050919050565b610e6d81611a90565b610eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea390612a88565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610f2a836107ba565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610f7c836107ba565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610fbe5750610fbd8185610bea565b5b80610ffc57508373ffffffffffffffffffffffffffffffffffffffff16610fe4846105c2565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611025826107ba565b73ffffffffffffffffffffffffffffffffffffffff161461107b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107290612d30565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e190612dc2565b60405180910390fd5b6110f78383836001611ad1565b8273ffffffffffffffffffffffffffffffffffffffff16611117826107ba565b73ffffffffffffffffffffffffffffffffffffffff161461116d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116490612d30565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46112f98383836001611ad7565b505050565b611306610eaf565b73ffffffffffffffffffffffffffffffffffffffff1661132461090b565b73ffffffffffffffffffffffffffffffffffffffff161461137a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137190612e2e565b60405180910390fd5b565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036114ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e490612e9a565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115de9190611f5c565b60405180910390a3505050565b6115f6848484611005565b61160284848484611add565b611641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163890612f2c565b60405180910390fd5b50505050565b606060098054611656906125d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611682906125d7565b80156116cf5780601f106116a4576101008083540402835291602001916116cf565b820191906000526020600020905b8154815290600101906020018083116116b257829003601f168201915b5050505050905090565b60606116e482610e64565b60006116ee611647565b9050600081511161170e5760405180602001604052806000815250611739565b8061171884611c64565b604051602001611729929190612b76565b6040516020818303038152906040525b915050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cb90612f98565b60405180910390fd5b6117dd81611a90565b1561181d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181490613004565b60405180910390fd5b61182b600083836001611ad1565b61183481611a90565b15611874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186b90613004565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461197e600083836001611ad7565b5050565b61198b82611a90565b6119ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c190613096565b60405180910390fd5b806006600084815260200190815260200160002090816119ea919061296a565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051611a1a9190612361565b60405180910390a15050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611ab28361137c565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b6000611afe8473ffffffffffffffffffffffffffffffffffffffff16611d32565b15611c57578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b27610eaf565b8786866040518563ffffffff1660e01b8152600401611b49949392919061310b565b6020604051808303816000875af1925050508015611b8557506040513d601f19601f82011682018060405250810190611b82919061316c565b60015b611c07573d8060008114611bb5576040519150601f19603f3d011682016040523d82523d6000602084013e611bba565b606091505b506000815103611bff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf690612f2c565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611c5c565b600190505b949350505050565b606060006001611c7384611d55565b01905060008167ffffffffffffffff811115611c9257611c916121b1565b5b6040519080825280601f01601f191660200182016040528015611cc45781602001600182028036833780820191505090505b509050600082602001820190505b600115611d27578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611d1b57611d1a613199565b5b04945060008503611cd2575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611db3577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611da957611da8613199565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611df0576d04ee2d6d415b85acef81000000008381611de657611de5613199565b5b0492506020810190505b662386f26fc100008310611e1f57662386f26fc100008381611e1557611e14613199565b5b0492506010810190505b6305f5e1008310611e48576305f5e1008381611e3e57611e3d613199565b5b0492506008810190505b6127108310611e6d576127108381611e6357611e62613199565b5b0492506004810190505b60648310611e905760648381611e8657611e85613199565b5b0492506002810190505b600a8310611e9f576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ef181611ebc565b8114611efc57600080fd5b50565b600081359050611f0e81611ee8565b92915050565b600060208284031215611f2a57611f29611eb2565b5b6000611f3884828501611eff565b91505092915050565b60008115159050919050565b611f5681611f41565b82525050565b6000602082019050611f716000830184611f4d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fb1578082015181840152602081019050611f96565b60008484015250505050565b6000601f19601f8301169050919050565b6000611fd982611f77565b611fe38185611f82565b9350611ff3818560208601611f93565b611ffc81611fbd565b840191505092915050565b600060208201905081810360008301526120218184611fce565b905092915050565b6000819050919050565b61203c81612029565b811461204757600080fd5b50565b60008135905061205981612033565b92915050565b60006020828403121561207557612074611eb2565b5b60006120838482850161204a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120b78261208c565b9050919050565b6120c7816120ac565b82525050565b60006020820190506120e260008301846120be565b92915050565b6120f1816120ac565b81146120fc57600080fd5b50565b60008135905061210e816120e8565b92915050565b6000806040838503121561212b5761212a611eb2565b5b6000612139858286016120ff565b925050602061214a8582860161204a565b9150509250929050565b60008060006060848603121561216d5761216c611eb2565b5b600061217b868287016120ff565b935050602061218c868287016120ff565b925050604061219d8682870161204a565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121e982611fbd565b810181811067ffffffffffffffff82111715612208576122076121b1565b5b80604052505050565b600061221b611ea8565b905061222782826121e0565b919050565b600067ffffffffffffffff821115612247576122466121b1565b5b61225082611fbd565b9050602081019050919050565b82818337600083830152505050565b600061227f61227a8461222c565b612211565b90508281526020810184848401111561229b5761229a6121ac565b5b6122a684828561225d565b509392505050565b600082601f8301126122c3576122c26121a7565b5b81356122d384826020860161226c565b91505092915050565b6000602082840312156122f2576122f1611eb2565b5b600082013567ffffffffffffffff8111156123105761230f611eb7565b5b61231c848285016122ae565b91505092915050565b60006020828403121561233b5761233a611eb2565b5b6000612349848285016120ff565b91505092915050565b61235b81612029565b82525050565b60006020820190506123766000830184612352565b92915050565b61238581611f41565b811461239057600080fd5b50565b6000813590506123a28161237c565b92915050565b600080604083850312156123bf576123be611eb2565b5b60006123cd858286016120ff565b92505060206123de85828601612393565b9150509250929050565b600067ffffffffffffffff821115612403576124026121b1565b5b61240c82611fbd565b9050602081019050919050565b600061242c612427846123e8565b612211565b905082815260208101848484011115612448576124476121ac565b5b61245384828561225d565b509392505050565b600082601f8301126124705761246f6121a7565b5b8135612480848260208601612419565b91505092915050565b600080600080608085870312156124a3576124a2611eb2565b5b60006124b1878288016120ff565b94505060206124c2878288016120ff565b93505060406124d38782880161204a565b925050606085013567ffffffffffffffff8111156124f4576124f3611eb7565b5b6125008782880161245b565b91505092959194509250565b6000806040838503121561252357612522611eb2565b5b6000612531858286016120ff565b9250506020612542858286016120ff565b9150509250929050565b6000806040838503121561256357612562611eb2565b5b6000612571858286016120ff565b925050602083013567ffffffffffffffff81111561259257612591611eb7565b5b61259e858286016122ae565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806125ef57607f821691505b602082108103612602576126016125a8565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612664602183611f82565b915061266f82612608565b604082019050919050565b6000602082019050818103600083015261269381612657565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006126f6603d83611f82565b91506127018261269a565b604082019050919050565b60006020820190508181036000830152612725816126e9565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612788602d83611f82565b91506127938261272c565b604082019050919050565b600060208201905081810360008301526127b78161277b565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826127e3565b61282a86836127e3565b95508019841693508086168417925050509392505050565b6000819050919050565b600061286761286261285d84612029565b612842565b612029565b9050919050565b6000819050919050565b6128818361284c565b61289561288d8261286e565b8484546127f0565b825550505050565b600090565b6128aa61289d565b6128b5818484612878565b505050565b5b818110156128d9576128ce6000826128a2565b6001810190506128bb565b5050565b601f82111561291e576128ef816127be565b6128f8846127d3565b81016020851015612907578190505b61291b612913856127d3565b8301826128ba565b50505b505050565b600082821c905092915050565b600061294160001984600802612923565b1980831691505092915050565b600061295a8383612930565b9150826002028217905092915050565b61297382611f77565b67ffffffffffffffff81111561298c5761298b6121b1565b5b61299682546125d7565b6129a18282856128dd565b600060209050601f8311600181146129d457600084156129c2578287015190505b6129cc858261294e565b865550612a34565b601f1984166129e2866127be565b60005b82811015612a0a578489015182556001820191506020850194506020810190506129e5565b86831015612a275784890151612a23601f891682612930565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612a72601883611f82565b9150612a7d82612a3c565b602082019050919050565b60006020820190508181036000830152612aa181612a65565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612b04602983611f82565b9150612b0f82612aa8565b604082019050919050565b60006020820190508181036000830152612b3381612af7565b9050919050565b600081905092915050565b6000612b5082611f77565b612b5a8185612b3a565b9350612b6a818560208601611f93565b80840191505092915050565b6000612b828285612b45565b9150612b8e8284612b45565b91508190509392505050565b7f5472616e73616374696f6e2076616c756520646964206e6f7420657175616c2060008201527f746865206d696e74207072696365000000000000000000000000000000000000602082015250565b6000612bf6602e83611f82565b9150612c0182612b9a565b604082019050919050565b60006020820190508181036000830152612c2581612be9565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612c88602683611f82565b9150612c9382612c2c565b604082019050919050565b60006020820190508181036000830152612cb781612c7b565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612d1a602583611f82565b9150612d2582612cbe565b604082019050919050565b60006020820190508181036000830152612d4981612d0d565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612dac602483611f82565b9150612db782612d50565b604082019050919050565b60006020820190508181036000830152612ddb81612d9f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612e18602083611f82565b9150612e2382612de2565b602082019050919050565b60006020820190508181036000830152612e4781612e0b565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612e84601983611f82565b9150612e8f82612e4e565b602082019050919050565b60006020820190508181036000830152612eb381612e77565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612f16603283611f82565b9150612f2182612eba565b604082019050919050565b60006020820190508181036000830152612f4581612f09565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612f82602083611f82565b9150612f8d82612f4c565b602082019050919050565b60006020820190508181036000830152612fb181612f75565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612fee601c83611f82565b9150612ff982612fb8565b602082019050919050565b6000602082019050818103600083015261301d81612fe1565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613080602e83611f82565b915061308b82613024565b604082019050919050565b600060208201905081810360008301526130af81613073565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006130dd826130b6565b6130e781856130c1565b93506130f7818560208601611f93565b61310081611fbd565b840191505092915050565b600060808201905061312060008301876120be565b61312d60208301866120be565b61313a6040830185612352565b818103606083015261314c81846130d2565b905095945050505050565b60008151905061316681611ee8565b92915050565b60006020828403121561318257613181611eb2565b5b600061319084828501613157565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea264697066735822122005d847aa812b472f419c0851c38f9f88e2bd89c2dabfda1c874cef06d4ed4e8964736f6c63430008120033";

    public static final String FUNC_MINT_PRICE = "MINT_PRICE";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BASETOKENURI = "baseTokenURI";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTNFT = "mintNFT";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBASETOKENURI = "setBaseTokenURI";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BATCHMETADATAUPDATE_EVENT = new Event("BatchMetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event METADATAUPDATE_EVENT = new Event("MetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected UniqonNFT(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UniqonNFT(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UniqonNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UniqonNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<BatchMetadataUpdateEventResponse> getBatchMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<BatchMetadataUpdateEventResponse> responses = new ArrayList<BatchMetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BatchMetadataUpdateEventResponse getBatchMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, log);
        BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBatchMetadataUpdateEventFromLog(log));
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BATCHMETADATAUPDATE_EVENT));
        return batchMetadataUpdateEventFlowable(filter);
    }

    public static List<MetadataUpdateEventResponse> getMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<MetadataUpdateEventResponse> responses = new ArrayList<MetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MetadataUpdateEventResponse getMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, log);
        MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMetadataUpdateEventFromLog(log));
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METADATAUPDATE_EVENT));
        return metadataUpdateEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> MINT_PRICE() {
        final Function function = new Function(FUNC_MINT_PRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> baseTokenURI() {
        final Function function = new Function(FUNC_BASETOKENURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintNFT(String recipient, String tokenURI, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MINTNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.Utf8String(tokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBaseTokenURI(String _baseTokenURI) {
        final Function function = new Function(
                FUNC_SETBASETOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_baseTokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static UniqonNFT load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UniqonNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UniqonNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UniqonNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UniqonNFT load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UniqonNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UniqonNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UniqonNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UniqonNFT> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UniqonNFT.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<UniqonNFT> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UniqonNFT.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UniqonNFT> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UniqonNFT.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UniqonNFT> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UniqonNFT.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BatchMetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;
    }

    public static class MetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
