package ssafy.uniqon.service;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class UniqonNFT extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506040518060400160405280600681526020017f556e69716f6e00000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f555100000000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000433565b508060019081620000a1919062000433565b505050620000c4620000b8620000eb60201b60201c565b620000f360201b60201c565b6040518060200160405280600081525060099081620000e4919062000433565b506200051a565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200023b57607f821691505b602082108103620002515762000250620001f3565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002bb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200027c565b620002c786836200027c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003146200030e6200030884620002df565b620002e9565b620002df565b9050919050565b6000819050919050565b6200033083620002f3565b620003486200033f826200031b565b84845462000289565b825550505050565b600090565b6200035f62000350565b6200036c81848462000325565b505050565b5b8181101562000394576200038860008262000355565b60018101905062000372565b5050565b601f821115620003e357620003ad8162000257565b620003b8846200026c565b81016020851015620003c8578190505b620003e0620003d7856200026c565b83018262000371565b50505b505050565b600082821c905092915050565b60006200040860001984600802620003e8565b1980831691505092915050565b6000620004238383620003f5565b9150826002028217905092915050565b6200043e82620001b9565b67ffffffffffffffff8111156200045a5762000459620001c4565b5b62000466825462000222565b6200047382828562000398565b600060209050601f831160018114620004ab576000841562000496578287015190505b620004a2858262000415565b86555062000512565b601f198416620004bb8662000257565b60005b82811015620004e557848901518255600182019150602085019450602081019050620004be565b8683101562000505578489015162000501601f891682620003f5565b8355505b6001600288020188555050505b505050505050565b61327b806200052a6000396000f3fe60806040526004361061012a5760003560e01c8063715018a6116100ab578063c002d23d1161006f578063c002d23d146103e1578063c87b56dd1461040c578063d547cfb714610449578063e985e9c514610474578063eacabe14146104b1578063f2fde38b146104ee5761012a565b8063715018a6146103225780638da5cb5b1461033957806395d89b4114610364578063a22cb4651461038f578063b88d4fde146103b85761012a565b806330176e13116100f257806330176e131461022657806342842e0e1461024f57806354ba0f27146102785780636352211e146102a857806370a08231146102e55761012a565b806301ffc9a71461012f57806306fdde031461016c578063081812fc14610197578063095ea7b3146101d457806323b872dd146101fd575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190611f91565b610517565b6040516101639190611fd9565b60405180910390f35b34801561017857600080fd5b50610181610578565b60405161018e9190612084565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b991906120dc565b61060a565b6040516101cb919061214a565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f69190612191565b610650565b005b34801561020957600080fd5b50610224600480360381019061021f91906121d1565b610767565b005b34801561023257600080fd5b5061024d60048036038101906102489190612359565b6107c7565b005b34801561025b57600080fd5b50610276600480360381019061027191906121d1565b6107e2565b005b610292600480360381019061028d91906123a2565b610802565b60405161029f91906123de565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca91906120dc565b610878565b6040516102dc919061214a565b60405180910390f35b3480156102f157600080fd5b5061030c600480360381019061030791906123a2565b6108fe565b60405161031991906123de565b60405180910390f35b34801561032e57600080fd5b506103376109b5565b005b34801561034557600080fd5b5061034e6109c9565b60405161035b919061214a565b60405180910390f35b34801561037057600080fd5b506103796109f3565b6040516103869190612084565b60405180910390f35b34801561039b57600080fd5b506103b660048036038101906103b19190612425565b610a85565b005b3480156103c457600080fd5b506103df60048036038101906103da9190612506565b610a9b565b005b3480156103ed57600080fd5b506103f6610afd565b60405161040391906123de565b60405180910390f35b34801561041857600080fd5b50610433600480360381019061042e91906120dc565b610b08565b6040516104409190612084565b60405180910390f35b34801561045557600080fd5b5061045e610c1a565b60405161046b9190612084565b60405180910390f35b34801561048057600080fd5b5061049b60048036038101906104969190612589565b610ca8565b6040516104a89190611fd9565b60405180910390f35b3480156104bd57600080fd5b506104d860048036038101906104d391906125c9565b610d3c565b6040516104e591906123de565b60405180910390f35b3480156104fa57600080fd5b50610515600480360381019061051091906123a2565b610d7c565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610571575061057082610dff565b5b9050919050565b60606000805461058790612654565b80601f01602080910402602001604051908101604052809291908181526020018280546105b390612654565b80156106005780601f106105d557610100808354040283529160200191610600565b820191906000526020600020905b8154815290600101906020018083116105e357829003601f168201915b5050505050905090565b600061061582610ee1565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061065b82610878565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c2906126f7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106ea610f2c565b73ffffffffffffffffffffffffffffffffffffffff161480610719575061071881610713610f2c565b610ca8565b5b610758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074f90612789565b60405180910390fd5b6107628383610f34565b505050565b610778610772610f2c565b82610fed565b6107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae9061281b565b60405180910390fd5b6107c2838383611082565b505050565b6107cf61137b565b80600990816107de91906129e7565b5050565b6107fd83838360405180602001604052806000815250610a9b565b505050565b60006601c6bf52634000341461084d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084490612b2b565b60405180910390fd5b61085760086113f9565b6000610863600861140f565b905061086f838261141d565b80915050919050565b6000806108848361163a565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ec90612b97565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361096e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096590612c29565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109bd61137b565b6109c76000611677565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610a0290612654565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2e90612654565b8015610a7b5780601f10610a5057610100808354040283529160200191610a7b565b820191906000526020600020905b815481529060010190602001808311610a5e57829003601f168201915b5050505050905090565b610a97610a90610f2c565b838361173d565b5050565b610aac610aa6610f2c565b83610fed565b610aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae29061281b565b60405180910390fd5b610af7848484846118a9565b50505050565b6601c6bf5263400081565b6060610b1382610ee1565b6000600660008481526020019081526020016000208054610b3390612654565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5f90612654565b8015610bac5780601f10610b8157610100808354040283529160200191610bac565b820191906000526020600020905b815481529060010190602001808311610b8f57829003601f168201915b505050505090506000610bbd611905565b90506000815103610bd2578192505050610c15565b600082511115610c07578082604051602001610bef929190612c85565b60405160208183030381529060405292505050610c15565b610c1084611997565b925050505b919050565b60098054610c2790612654565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5390612654565b8015610ca05780601f10610c7557610100808354040283529160200191610ca0565b820191906000526020600020905b815481529060010190602001808311610c8357829003601f168201915b505050505081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000610d4661137b565b610d5060086113f9565b6000610d5c600861140f565b9050610d68848261141d565b610d7281846119ff565b8091505092915050565b610d8461137b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea90612d1b565b60405180910390fd5b610dfc81611677565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610eca57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610eda5750610ed982611aa3565b5b9050919050565b610eea81611b0d565b610f29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2090612b97565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610fa783610878565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ff983610878565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061103b575061103a8185610ca8565b5b8061107957508373ffffffffffffffffffffffffffffffffffffffff166110618461060a565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166110a282610878565b73ffffffffffffffffffffffffffffffffffffffff16146110f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ef90612dad565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115e90612e3f565b60405180910390fd5b6111748383836001611b4e565b8273ffffffffffffffffffffffffffffffffffffffff1661119482610878565b73ffffffffffffffffffffffffffffffffffffffff16146111ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e190612dad565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46113768383836001611b54565b505050565b611383610f2c565b73ffffffffffffffffffffffffffffffffffffffff166113a16109c9565b73ffffffffffffffffffffffffffffffffffffffff16146113f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ee90612eab565b60405180910390fd5b565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361148c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148390612f17565b60405180910390fd5b61149581611b0d565b156114d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cc90612f83565b60405180910390fd5b6114e3600083836001611b4e565b6114ec81611b0d565b1561152c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152390612f83565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611636600083836001611b54565b5050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036117ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a290612fef565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161189c9190611fd9565b60405180910390a3505050565b6118b4848484611082565b6118c084848484611b5a565b6118ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f690613081565b60405180910390fd5b50505050565b60606009805461191490612654565b80601f016020809104026020016040519081016040528092919081815260200182805461194090612654565b801561198d5780601f106119625761010080835404028352916020019161198d565b820191906000526020600020905b81548152906001019060200180831161197057829003601f168201915b5050505050905090565b60606119a282610ee1565b60006119ac611905565b905060008151116119cc57604051806020016040528060008152506119f7565b806119d684611ce1565b6040516020016119e7929190612c85565b6040516020818303038152906040525b915050919050565b611a0882611b0d565b611a47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3e90613113565b60405180910390fd5b80600660008481526020019081526020016000209081611a6791906129e7565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051611a9791906123de565b60405180910390a15050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611b2f8361163a565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b6000611b7b8473ffffffffffffffffffffffffffffffffffffffff16611daf565b15611cd4578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611ba4610f2c565b8786866040518563ffffffff1660e01b8152600401611bc69493929190613188565b6020604051808303816000875af1925050508015611c0257506040513d601f19601f82011682018060405250810190611bff91906131e9565b60015b611c84573d8060008114611c32576040519150601f19603f3d011682016040523d82523d6000602084013e611c37565b606091505b506000815103611c7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7390613081565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611cd9565b600190505b949350505050565b606060006001611cf084611dd2565b01905060008167ffffffffffffffff811115611d0f57611d0e61222e565b5b6040519080825280601f01601f191660200182016040528015611d415781602001600182028036833780820191505090505b509050600082602001820190505b600115611da4578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611d9857611d97613216565b5b04945060008503611d4f575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611e30577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611e2657611e25613216565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611e6d576d04ee2d6d415b85acef81000000008381611e6357611e62613216565b5b0492506020810190505b662386f26fc100008310611e9c57662386f26fc100008381611e9257611e91613216565b5b0492506010810190505b6305f5e1008310611ec5576305f5e1008381611ebb57611eba613216565b5b0492506008810190505b6127108310611eea576127108381611ee057611edf613216565b5b0492506004810190505b60648310611f0d5760648381611f0357611f02613216565b5b0492506002810190505b600a8310611f1c576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611f6e81611f39565b8114611f7957600080fd5b50565b600081359050611f8b81611f65565b92915050565b600060208284031215611fa757611fa6611f2f565b5b6000611fb584828501611f7c565b91505092915050565b60008115159050919050565b611fd381611fbe565b82525050565b6000602082019050611fee6000830184611fca565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561202e578082015181840152602081019050612013565b60008484015250505050565b6000601f19601f8301169050919050565b600061205682611ff4565b6120608185611fff565b9350612070818560208601612010565b6120798161203a565b840191505092915050565b6000602082019050818103600083015261209e818461204b565b905092915050565b6000819050919050565b6120b9816120a6565b81146120c457600080fd5b50565b6000813590506120d6816120b0565b92915050565b6000602082840312156120f2576120f1611f2f565b5b6000612100848285016120c7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061213482612109565b9050919050565b61214481612129565b82525050565b600060208201905061215f600083018461213b565b92915050565b61216e81612129565b811461217957600080fd5b50565b60008135905061218b81612165565b92915050565b600080604083850312156121a8576121a7611f2f565b5b60006121b68582860161217c565b92505060206121c7858286016120c7565b9150509250929050565b6000806000606084860312156121ea576121e9611f2f565b5b60006121f88682870161217c565b93505060206122098682870161217c565b925050604061221a868287016120c7565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122668261203a565b810181811067ffffffffffffffff821117156122855761228461222e565b5b80604052505050565b6000612298611f25565b90506122a4828261225d565b919050565b600067ffffffffffffffff8211156122c4576122c361222e565b5b6122cd8261203a565b9050602081019050919050565b82818337600083830152505050565b60006122fc6122f7846122a9565b61228e565b90508281526020810184848401111561231857612317612229565b5b6123238482856122da565b509392505050565b600082601f8301126123405761233f612224565b5b81356123508482602086016122e9565b91505092915050565b60006020828403121561236f5761236e611f2f565b5b600082013567ffffffffffffffff81111561238d5761238c611f34565b5b6123998482850161232b565b91505092915050565b6000602082840312156123b8576123b7611f2f565b5b60006123c68482850161217c565b91505092915050565b6123d8816120a6565b82525050565b60006020820190506123f360008301846123cf565b92915050565b61240281611fbe565b811461240d57600080fd5b50565b60008135905061241f816123f9565b92915050565b6000806040838503121561243c5761243b611f2f565b5b600061244a8582860161217c565b925050602061245b85828601612410565b9150509250929050565b600067ffffffffffffffff8211156124805761247f61222e565b5b6124898261203a565b9050602081019050919050565b60006124a96124a484612465565b61228e565b9050828152602081018484840111156124c5576124c4612229565b5b6124d08482856122da565b509392505050565b600082601f8301126124ed576124ec612224565b5b81356124fd848260208601612496565b91505092915050565b600080600080608085870312156125205761251f611f2f565b5b600061252e8782880161217c565b945050602061253f8782880161217c565b9350506040612550878288016120c7565b925050606085013567ffffffffffffffff81111561257157612570611f34565b5b61257d878288016124d8565b91505092959194509250565b600080604083850312156125a05761259f611f2f565b5b60006125ae8582860161217c565b92505060206125bf8582860161217c565b9150509250929050565b600080604083850312156125e0576125df611f2f565b5b60006125ee8582860161217c565b925050602083013567ffffffffffffffff81111561260f5761260e611f34565b5b61261b8582860161232b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061266c57607f821691505b60208210810361267f5761267e612625565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006126e1602183611fff565b91506126ec82612685565b604082019050919050565b60006020820190508181036000830152612710816126d4565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612773603d83611fff565b915061277e82612717565b604082019050919050565b600060208201905081810360008301526127a281612766565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612805602d83611fff565b9150612810826127a9565b604082019050919050565b60006020820190508181036000830152612834816127f8565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261289d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612860565b6128a78683612860565b95508019841693508086168417925050509392505050565b6000819050919050565b60006128e46128df6128da846120a6565b6128bf565b6120a6565b9050919050565b6000819050919050565b6128fe836128c9565b61291261290a826128eb565b84845461286d565b825550505050565b600090565b61292761291a565b6129328184846128f5565b505050565b5b818110156129565761294b60008261291f565b600181019050612938565b5050565b601f82111561299b5761296c8161283b565b61297584612850565b81016020851015612984578190505b61299861299085612850565b830182612937565b50505b505050565b600082821c905092915050565b60006129be600019846008026129a0565b1980831691505092915050565b60006129d783836129ad565b9150826002028217905092915050565b6129f082611ff4565b67ffffffffffffffff811115612a0957612a0861222e565b5b612a138254612654565b612a1e82828561295a565b600060209050601f831160018114612a515760008415612a3f578287015190505b612a4985826129cb565b865550612ab1565b601f198416612a5f8661283b565b60005b82811015612a8757848901518255600182019150602085019450602081019050612a62565b86831015612aa45784890151612aa0601f8916826129ad565b8355505b6001600288020188555050505b505050505050565b7f5472616e73616374696f6e2076616c756520646964206e6f7420657175616c2060008201527f746865206d696e74207072696365000000000000000000000000000000000000602082015250565b6000612b15602e83611fff565b9150612b2082612ab9565b604082019050919050565b60006020820190508181036000830152612b4481612b08565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612b81601883611fff565b9150612b8c82612b4b565b602082019050919050565b60006020820190508181036000830152612bb081612b74565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612c13602983611fff565b9150612c1e82612bb7565b604082019050919050565b60006020820190508181036000830152612c4281612c06565b9050919050565b600081905092915050565b6000612c5f82611ff4565b612c698185612c49565b9350612c79818560208601612010565b80840191505092915050565b6000612c918285612c54565b9150612c9d8284612c54565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d05602683611fff565b9150612d1082612ca9565b604082019050919050565b60006020820190508181036000830152612d3481612cf8565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612d97602583611fff565b9150612da282612d3b565b604082019050919050565b60006020820190508181036000830152612dc681612d8a565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612e29602483611fff565b9150612e3482612dcd565b604082019050919050565b60006020820190508181036000830152612e5881612e1c565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612e95602083611fff565b9150612ea082612e5f565b602082019050919050565b60006020820190508181036000830152612ec481612e88565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612f01602083611fff565b9150612f0c82612ecb565b602082019050919050565b60006020820190508181036000830152612f3081612ef4565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612f6d601c83611fff565b9150612f7882612f37565b602082019050919050565b60006020820190508181036000830152612f9c81612f60565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612fd9601983611fff565b9150612fe482612fa3565b602082019050919050565b6000602082019050818103600083015261300881612fcc565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061306b603283611fff565b91506130768261300f565b604082019050919050565b6000602082019050818103600083015261309a8161305e565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006130fd602e83611fff565b9150613108826130a1565b604082019050919050565b6000602082019050818103600083015261312c816130f0565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061315a82613133565b613164818561313e565b9350613174818560208601612010565b61317d8161203a565b840191505092915050565b600060808201905061319d600083018761213b565b6131aa602083018661213b565b6131b760408301856123cf565b81810360608301526131c9818461314f565b905095945050505050565b6000815190506131e381611f65565b92915050565b6000602082840312156131ff576131fe611f2f565b5b600061320d848285016131d4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220be412a380697f5917524d9d42cdf080201bee59999e5965fb42fb830ff46c3d864736f6c63430008120033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_mintNFT = "mintNFT";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBASETOKENURI = "setBaseTokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BASETOKENURI = "baseTokenURI";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT_PRICE = "MINT_PRICE";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BATCHMETADATAUPDATE_EVENT = new Event("BatchMetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event METADATAUPDATE_EVENT = new Event("MetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected UniqonNFT(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UniqonNFT(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UniqonNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UniqonNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<BatchMetadataUpdateEventResponse> getBatchMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<BatchMetadataUpdateEventResponse> responses = new ArrayList<BatchMetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BatchMetadataUpdateEventResponse getBatchMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, log);
        BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBatchMetadataUpdateEventFromLog(log));
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BATCHMETADATAUPDATE_EVENT));
        return batchMetadataUpdateEventFlowable(filter);
    }

    public static List<MetadataUpdateEventResponse> getMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<MetadataUpdateEventResponse> responses = new ArrayList<MetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MetadataUpdateEventResponse getMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, log);
        MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMetadataUpdateEventFromLog(log));
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METADATAUPDATE_EVENT));
        return metadataUpdateEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> mintNFT(String recipient, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_mintNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> mintNFT(String recipient, String tokenURI) {
        final Function function = new Function(
                FUNC_mintNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.Utf8String(tokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBaseTokenURI(String _baseTokenURI) {
        final Function function = new Function(
                FUNC_SETBASETOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_baseTokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> baseTokenURI() {
        final Function function = new Function(FUNC_BASETOKENURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> MINT_PRICE() {
        final Function function = new Function(FUNC_MINT_PRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static UniqonNFT load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UniqonNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UniqonNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UniqonNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UniqonNFT load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UniqonNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UniqonNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UniqonNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UniqonNFT> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UniqonNFT.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<UniqonNFT> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UniqonNFT.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UniqonNFT> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UniqonNFT.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UniqonNFT> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UniqonNFT.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BatchMetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;
    }

    public static class MetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
